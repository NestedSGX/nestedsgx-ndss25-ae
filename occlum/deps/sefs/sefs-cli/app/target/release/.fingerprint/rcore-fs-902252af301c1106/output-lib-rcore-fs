{"message":"the feature `vec_spare_capacity` has been stable since 1.60.0 and no longer requires an attribute to enable","code":{"code":"stable_features","explanation":null},"level":"warning","spans":[{"file_name":"/root/occlum/deps/sefs/rcore-fs/src/lib.rs","byte_start":11,"byte_end":29,"line_start":1,"line_end":1,"column_start":12,"column_end":30,"is_primary":true,"text":[{"text":"#![feature(vec_spare_capacity)]","highlight_start":12,"highlight_end":30}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(stable_features)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the feature `vec_spare_capacity` has been stable since 1.60.0 and no longer requires an attribute to enable\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/root/occlum/deps/sefs/rcore-fs/src/lib.rs:1:12\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m#![feature(vec_spare_capacity)]\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(stable_features)]` on by default\u001b[0m\n\n"}
{"message":"the type `[u8; 1024]` does not permit being left uninitialized","code":{"code":"invalid_value","explanation":null},"level":"warning","spans":[{"file_name":"/root/occlum/deps/sefs/rcore-fs/src/dev/mod.rs","byte_start":1951,"byte_end":1986,"line_start":65,"line_end":65,"column_start":61,"column_end":96,"is_primary":true,"text":[{"text":"                let mut block_buf: [u8; 1 << 10] = unsafe { MaybeUninit::uninit().assume_init() };","highlight_start":61,"highlight_end":96}],"label":"this code causes undefined behavior when executed","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/root/occlum/deps/sefs/rcore-fs/src/dev/mod.rs","byte_start":1951,"byte_end":1986,"line_start":65,"line_end":65,"column_start":61,"column_end":96,"is_primary":true,"text":[{"text":"                let mut block_buf: [u8; 1 << 10] = unsafe { MaybeUninit::uninit().assume_init() };","highlight_start":61,"highlight_end":96}],"label":"help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"integers must not be uninitialized","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"`#[warn(invalid_value)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the type `[u8; 1024]` does not permit being left uninitialized\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/root/occlum/deps/sefs/rcore-fs/src/dev/mod.rs:65:61\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m65\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let mut block_buf: [u8; 1 << 10] = unsafe { MaybeUninit::uninit().assume_init() };\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis code causes undefined behavior when executed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: integers must not be uninitialized\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(invalid_value)]` on by default\u001b[0m\n\n"}
{"message":"the type `[u8; 1024]` does not permit being left uninitialized","code":{"code":"invalid_value","explanation":null},"level":"warning","spans":[{"file_name":"/root/occlum/deps/sefs/rcore-fs/src/dev/mod.rs","byte_start":3048,"byte_end":3083,"line_start":92,"line_end":92,"column_start":61,"column_end":96,"is_primary":true,"text":[{"text":"                let mut block_buf: [u8; 1 << 10] = unsafe { MaybeUninit::uninit().assume_init() };","highlight_start":61,"highlight_end":96}],"label":"this code causes undefined behavior when executed","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/root/occlum/deps/sefs/rcore-fs/src/dev/mod.rs","byte_start":3048,"byte_end":3083,"line_start":92,"line_end":92,"column_start":61,"column_end":96,"is_primary":true,"text":[{"text":"                let mut block_buf: [u8; 1 << 10] = unsafe { MaybeUninit::uninit().assume_init() };","highlight_start":61,"highlight_end":96}],"label":"help: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"integers must not be uninitialized","code":null,"level":"note","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: the type `[u8; 1024]` does not permit being left uninitialized\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/root/occlum/deps/sefs/rcore-fs/src/dev/mod.rs:92:61\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m92\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m                let mut block_buf: [u8; 1 << 10] = unsafe { MaybeUninit::uninit().assume_init() };\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33mthis code causes undefined behavior when executed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[33mhelp: use `MaybeUninit<T>` instead, and only call `assume_init` after initialization is done\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: integers must not be uninitialized\u001b[0m\n\n"}
{"message":"3 warnings emitted","code":null,"level":"warning","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: 3 warnings emitted\u001b[0m\n\n"}
