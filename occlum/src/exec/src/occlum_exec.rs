// This file is generated by rust-protobuf 2.18.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `occlum_exec.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_18_2;

#[derive(PartialEq,Clone,Default)]
pub struct KillProcessRequest {
    // message fields
    pub process_id: i32,
    pub signal: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KillProcessRequest {
    fn default() -> &'a KillProcessRequest {
        <KillProcessRequest as ::protobuf::Message>::default_instance()
    }
}

impl KillProcessRequest {
    pub fn new() -> KillProcessRequest {
        ::std::default::Default::default()
    }

    // int32 process_id = 1;


    pub fn get_process_id(&self) -> i32 {
        self.process_id
    }
    pub fn clear_process_id(&mut self) {
        self.process_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_process_id(&mut self, v: i32) {
        self.process_id = v;
    }

    // int32 signal = 2;


    pub fn get_signal(&self) -> i32 {
        self.signal
    }
    pub fn clear_signal(&mut self) {
        self.signal = 0;
    }

    // Param is passed by value, moved
    pub fn set_signal(&mut self, v: i32) {
        self.signal = v;
    }
}

impl ::protobuf::Message for KillProcessRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.process_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.signal = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.process_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.process_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.signal != 0 {
            my_size += ::protobuf::rt::value_size(2, self.signal, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.process_id != 0 {
            os.write_int32(1, self.process_id)?;
        }
        if self.signal != 0 {
            os.write_int32(2, self.signal)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KillProcessRequest {
        KillProcessRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "process_id",
                |m: &KillProcessRequest| { &m.process_id },
                |m: &mut KillProcessRequest| { &mut m.process_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "signal",
                |m: &KillProcessRequest| { &m.signal },
                |m: &mut KillProcessRequest| { &mut m.signal },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<KillProcessRequest>(
                "KillProcessRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static KillProcessRequest {
        static instance: ::protobuf::rt::LazyV2<KillProcessRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KillProcessRequest::new)
    }
}

impl ::protobuf::Clear for KillProcessRequest {
    fn clear(&mut self) {
        self.process_id = 0;
        self.signal = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KillProcessRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KillProcessRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct KillProcessResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a KillProcessResponse {
    fn default() -> &'a KillProcessResponse {
        <KillProcessResponse as ::protobuf::Message>::default_instance()
    }
}

impl KillProcessResponse {
    pub fn new() -> KillProcessResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for KillProcessResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> KillProcessResponse {
        KillProcessResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<KillProcessResponse>(
                "KillProcessResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static KillProcessResponse {
        static instance: ::protobuf::rt::LazyV2<KillProcessResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(KillProcessResponse::new)
    }
}

impl ::protobuf::Clear for KillProcessResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for KillProcessResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for KillProcessResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetResultRequest {
    // message fields
    pub process_id: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetResultRequest {
    fn default() -> &'a GetResultRequest {
        <GetResultRequest as ::protobuf::Message>::default_instance()
    }
}

impl GetResultRequest {
    pub fn new() -> GetResultRequest {
        ::std::default::Default::default()
    }

    // int32 process_id = 1;


    pub fn get_process_id(&self) -> i32 {
        self.process_id
    }
    pub fn clear_process_id(&mut self) {
        self.process_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_process_id(&mut self, v: i32) {
        self.process_id = v;
    }
}

impl ::protobuf::Message for GetResultRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.process_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.process_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.process_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.process_id != 0 {
            os.write_int32(1, self.process_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetResultRequest {
        GetResultRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "process_id",
                |m: &GetResultRequest| { &m.process_id },
                |m: &mut GetResultRequest| { &mut m.process_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetResultRequest>(
                "GetResultRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetResultRequest {
        static instance: ::protobuf::rt::LazyV2<GetResultRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetResultRequest::new)
    }
}

impl ::protobuf::Clear for GetResultRequest {
    fn clear(&mut self) {
        self.process_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetResultRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetResultRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct GetResultResponse {
    // message fields
    pub status: GetResultResponse_ExecutionStatus,
    pub result: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a GetResultResponse {
    fn default() -> &'a GetResultResponse {
        <GetResultResponse as ::protobuf::Message>::default_instance()
    }
}

impl GetResultResponse {
    pub fn new() -> GetResultResponse {
        ::std::default::Default::default()
    }

    // .occlumexec.GetResultResponse.ExecutionStatus status = 1;


    pub fn get_status(&self) -> GetResultResponse_ExecutionStatus {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = GetResultResponse_ExecutionStatus::UNKNOWN;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: GetResultResponse_ExecutionStatus) {
        self.status = v;
    }

    // int32 result = 2;


    pub fn get_result(&self) -> i32 {
        self.result
    }
    pub fn clear_result(&mut self) {
        self.result = 0;
    }

    // Param is passed by value, moved
    pub fn set_result(&mut self, v: i32) {
        self.result = v;
    }
}

impl ::protobuf::Message for GetResultResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.result = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != GetResultResponse_ExecutionStatus::UNKNOWN {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if self.result != 0 {
            my_size += ::protobuf::rt::value_size(2, self.result, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != GetResultResponse_ExecutionStatus::UNKNOWN {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if self.result != 0 {
            os.write_int32(2, self.result)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> GetResultResponse {
        GetResultResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<GetResultResponse_ExecutionStatus>>(
                "status",
                |m: &GetResultResponse| { &m.status },
                |m: &mut GetResultResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "result",
                |m: &GetResultResponse| { &m.result },
                |m: &mut GetResultResponse| { &mut m.result },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<GetResultResponse>(
                "GetResultResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static GetResultResponse {
        static instance: ::protobuf::rt::LazyV2<GetResultResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(GetResultResponse::new)
    }
}

impl ::protobuf::Clear for GetResultResponse {
    fn clear(&mut self) {
        self.status = GetResultResponse_ExecutionStatus::UNKNOWN;
        self.result = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for GetResultResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for GetResultResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum GetResultResponse_ExecutionStatus {
    UNKNOWN = 0,
    RUNNING = 1,
    STOPPED = 2,
}

impl ::protobuf::ProtobufEnum for GetResultResponse_ExecutionStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<GetResultResponse_ExecutionStatus> {
        match value {
            0 => ::std::option::Option::Some(GetResultResponse_ExecutionStatus::UNKNOWN),
            1 => ::std::option::Option::Some(GetResultResponse_ExecutionStatus::RUNNING),
            2 => ::std::option::Option::Some(GetResultResponse_ExecutionStatus::STOPPED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [GetResultResponse_ExecutionStatus] = &[
            GetResultResponse_ExecutionStatus::UNKNOWN,
            GetResultResponse_ExecutionStatus::RUNNING,
            GetResultResponse_ExecutionStatus::STOPPED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<GetResultResponse_ExecutionStatus>("GetResultResponse.ExecutionStatus", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for GetResultResponse_ExecutionStatus {
}

impl ::std::default::Default for GetResultResponse_ExecutionStatus {
    fn default() -> Self {
        GetResultResponse_ExecutionStatus::UNKNOWN
    }
}

impl ::protobuf::reflect::ProtobufValue for GetResultResponse_ExecutionStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExecCommRequest {
    // message fields
    pub process_id: u32,
    pub sockpath: ::std::string::String,
    pub command: ::std::string::String,
    pub parameters: ::protobuf::RepeatedField<::std::string::String>,
    pub enviroments: ::protobuf::RepeatedField<::std::string::String>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExecCommRequest {
    fn default() -> &'a ExecCommRequest {
        <ExecCommRequest as ::protobuf::Message>::default_instance()
    }
}

impl ExecCommRequest {
    pub fn new() -> ExecCommRequest {
        ::std::default::Default::default()
    }

    // uint32 process_id = 1;


    pub fn get_process_id(&self) -> u32 {
        self.process_id
    }
    pub fn clear_process_id(&mut self) {
        self.process_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_process_id(&mut self, v: u32) {
        self.process_id = v;
    }

    // string sockpath = 2;


    pub fn get_sockpath(&self) -> &str {
        &self.sockpath
    }
    pub fn clear_sockpath(&mut self) {
        self.sockpath.clear();
    }

    // Param is passed by value, moved
    pub fn set_sockpath(&mut self, v: ::std::string::String) {
        self.sockpath = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_sockpath(&mut self) -> &mut ::std::string::String {
        &mut self.sockpath
    }

    // Take field
    pub fn take_sockpath(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.sockpath, ::std::string::String::new())
    }

    // string command = 3;


    pub fn get_command(&self) -> &str {
        &self.command
    }
    pub fn clear_command(&mut self) {
        self.command.clear();
    }

    // Param is passed by value, moved
    pub fn set_command(&mut self, v: ::std::string::String) {
        self.command = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_command(&mut self) -> &mut ::std::string::String {
        &mut self.command
    }

    // Take field
    pub fn take_command(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.command, ::std::string::String::new())
    }

    // repeated string parameters = 4;


    pub fn get_parameters(&self) -> &[::std::string::String] {
        &self.parameters
    }
    pub fn clear_parameters(&mut self) {
        self.parameters.clear();
    }

    // Param is passed by value, moved
    pub fn set_parameters(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.parameters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_parameters(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.parameters
    }

    // Take field
    pub fn take_parameters(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.parameters, ::protobuf::RepeatedField::new())
    }

    // repeated string enviroments = 5;


    pub fn get_enviroments(&self) -> &[::std::string::String] {
        &self.enviroments
    }
    pub fn clear_enviroments(&mut self) {
        self.enviroments.clear();
    }

    // Param is passed by value, moved
    pub fn set_enviroments(&mut self, v: ::protobuf::RepeatedField<::std::string::String>) {
        self.enviroments = v;
    }

    // Mutable pointer to the field.
    pub fn mut_enviroments(&mut self) -> &mut ::protobuf::RepeatedField<::std::string::String> {
        &mut self.enviroments
    }

    // Take field
    pub fn take_enviroments(&mut self) -> ::protobuf::RepeatedField<::std::string::String> {
        ::std::mem::replace(&mut self.enviroments, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for ExecCommRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.process_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.sockpath)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.command)?;
                },
                4 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.parameters)?;
                },
                5 => {
                    ::protobuf::rt::read_repeated_string_into(wire_type, is, &mut self.enviroments)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.process_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.process_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.sockpath.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.sockpath);
        }
        if !self.command.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.command);
        }
        for value in &self.parameters {
            my_size += ::protobuf::rt::string_size(4, &value);
        };
        for value in &self.enviroments {
            my_size += ::protobuf::rt::string_size(5, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.process_id != 0 {
            os.write_uint32(1, self.process_id)?;
        }
        if !self.sockpath.is_empty() {
            os.write_string(2, &self.sockpath)?;
        }
        if !self.command.is_empty() {
            os.write_string(3, &self.command)?;
        }
        for v in &self.parameters {
            os.write_string(4, &v)?;
        };
        for v in &self.enviroments {
            os.write_string(5, &v)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExecCommRequest {
        ExecCommRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "process_id",
                |m: &ExecCommRequest| { &m.process_id },
                |m: &mut ExecCommRequest| { &mut m.process_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "sockpath",
                |m: &ExecCommRequest| { &m.sockpath },
                |m: &mut ExecCommRequest| { &mut m.sockpath },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "command",
                |m: &ExecCommRequest| { &m.command },
                |m: &mut ExecCommRequest| { &mut m.command },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "parameters",
                |m: &ExecCommRequest| { &m.parameters },
                |m: &mut ExecCommRequest| { &mut m.parameters },
            ));
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                "enviroments",
                |m: &ExecCommRequest| { &m.enviroments },
                |m: &mut ExecCommRequest| { &mut m.enviroments },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExecCommRequest>(
                "ExecCommRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExecCommRequest {
        static instance: ::protobuf::rt::LazyV2<ExecCommRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExecCommRequest::new)
    }
}

impl ::protobuf::Clear for ExecCommRequest {
    fn clear(&mut self) {
        self.process_id = 0;
        self.sockpath.clear();
        self.command.clear();
        self.parameters.clear();
        self.enviroments.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExecCommRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExecCommRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ExecCommResponse {
    // message fields
    pub status: ExecCommResponse_ExecutionStatus,
    pub process_id: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ExecCommResponse {
    fn default() -> &'a ExecCommResponse {
        <ExecCommResponse as ::protobuf::Message>::default_instance()
    }
}

impl ExecCommResponse {
    pub fn new() -> ExecCommResponse {
        ::std::default::Default::default()
    }

    // .occlumexec.ExecCommResponse.ExecutionStatus status = 1;


    pub fn get_status(&self) -> ExecCommResponse_ExecutionStatus {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = ExecCommResponse_ExecutionStatus::RUNNING;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: ExecCommResponse_ExecutionStatus) {
        self.status = v;
    }

    // int32 process_id = 2;


    pub fn get_process_id(&self) -> i32 {
        self.process_id
    }
    pub fn clear_process_id(&mut self) {
        self.process_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_process_id(&mut self, v: i32) {
        self.process_id = v;
    }
}

impl ::protobuf::Message for ExecCommResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.process_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != ExecCommResponse_ExecutionStatus::RUNNING {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        if self.process_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.process_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != ExecCommResponse_ExecutionStatus::RUNNING {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        if self.process_id != 0 {
            os.write_int32(2, self.process_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ExecCommResponse {
        ExecCommResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ExecCommResponse_ExecutionStatus>>(
                "status",
                |m: &ExecCommResponse| { &m.status },
                |m: &mut ExecCommResponse| { &mut m.status },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "process_id",
                |m: &ExecCommResponse| { &m.process_id },
                |m: &mut ExecCommResponse| { &mut m.process_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ExecCommResponse>(
                "ExecCommResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ExecCommResponse {
        static instance: ::protobuf::rt::LazyV2<ExecCommResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ExecCommResponse::new)
    }
}

impl ::protobuf::Clear for ExecCommResponse {
    fn clear(&mut self) {
        self.status = ExecCommResponse_ExecutionStatus::RUNNING;
        self.process_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ExecCommResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ExecCommResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ExecCommResponse_ExecutionStatus {
    RUNNING = 0,
    LAUNCH_FAILED = 1,
}

impl ::protobuf::ProtobufEnum for ExecCommResponse_ExecutionStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ExecCommResponse_ExecutionStatus> {
        match value {
            0 => ::std::option::Option::Some(ExecCommResponse_ExecutionStatus::RUNNING),
            1 => ::std::option::Option::Some(ExecCommResponse_ExecutionStatus::LAUNCH_FAILED),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ExecCommResponse_ExecutionStatus] = &[
            ExecCommResponse_ExecutionStatus::RUNNING,
            ExecCommResponse_ExecutionStatus::LAUNCH_FAILED,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ExecCommResponse_ExecutionStatus>("ExecCommResponse.ExecutionStatus", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ExecCommResponse_ExecutionStatus {
}

impl ::std::default::Default for ExecCommResponse_ExecutionStatus {
    fn default() -> Self {
        ExecCommResponse_ExecutionStatus::RUNNING
    }
}

impl ::protobuf::reflect::ProtobufValue for ExecCommResponse_ExecutionStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HealthCheckRequest {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HealthCheckRequest {
    fn default() -> &'a HealthCheckRequest {
        <HealthCheckRequest as ::protobuf::Message>::default_instance()
    }
}

impl HealthCheckRequest {
    pub fn new() -> HealthCheckRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for HealthCheckRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HealthCheckRequest {
        HealthCheckRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HealthCheckRequest>(
                "HealthCheckRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HealthCheckRequest {
        static instance: ::protobuf::rt::LazyV2<HealthCheckRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HealthCheckRequest::new)
    }
}

impl ::protobuf::Clear for HealthCheckRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HealthCheckRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheckRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HealthCheckResponse {
    // message fields
    pub status: HealthCheckResponse_ServingStatus,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a HealthCheckResponse {
    fn default() -> &'a HealthCheckResponse {
        <HealthCheckResponse as ::protobuf::Message>::default_instance()
    }
}

impl HealthCheckResponse {
    pub fn new() -> HealthCheckResponse {
        ::std::default::Default::default()
    }

    // .occlumexec.HealthCheckResponse.ServingStatus status = 1;


    pub fn get_status(&self) -> HealthCheckResponse_ServingStatus {
        self.status
    }
    pub fn clear_status(&mut self) {
        self.status = HealthCheckResponse_ServingStatus::SERVING;
    }

    // Param is passed by value, moved
    pub fn set_status(&mut self, v: HealthCheckResponse_ServingStatus) {
        self.status = v;
    }
}

impl ::protobuf::Message for HealthCheckResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.status, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.status != HealthCheckResponse_ServingStatus::SERVING {
            my_size += ::protobuf::rt::enum_size(1, self.status);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.status != HealthCheckResponse_ServingStatus::SERVING {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.status))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HealthCheckResponse {
        HealthCheckResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<HealthCheckResponse_ServingStatus>>(
                "status",
                |m: &HealthCheckResponse| { &m.status },
                |m: &mut HealthCheckResponse| { &mut m.status },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<HealthCheckResponse>(
                "HealthCheckResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static HealthCheckResponse {
        static instance: ::protobuf::rt::LazyV2<HealthCheckResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(HealthCheckResponse::new)
    }
}

impl ::protobuf::Clear for HealthCheckResponse {
    fn clear(&mut self) {
        self.status = HealthCheckResponse_ServingStatus::SERVING;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HealthCheckResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheckResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum HealthCheckResponse_ServingStatus {
    SERVING = 0,
    NOT_SERVING = 1,
}

impl ::protobuf::ProtobufEnum for HealthCheckResponse_ServingStatus {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<HealthCheckResponse_ServingStatus> {
        match value {
            0 => ::std::option::Option::Some(HealthCheckResponse_ServingStatus::SERVING),
            1 => ::std::option::Option::Some(HealthCheckResponse_ServingStatus::NOT_SERVING),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [HealthCheckResponse_ServingStatus] = &[
            HealthCheckResponse_ServingStatus::SERVING,
            HealthCheckResponse_ServingStatus::NOT_SERVING,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<HealthCheckResponse_ServingStatus>("HealthCheckResponse.ServingStatus", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for HealthCheckResponse_ServingStatus {
}

impl ::std::default::Default for HealthCheckResponse_ServingStatus {
    fn default() -> Self {
        HealthCheckResponse_ServingStatus::SERVING
    }
}

impl ::protobuf::reflect::ProtobufValue for HealthCheckResponse_ServingStatus {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StopRequest {
    // message fields
    pub time: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StopRequest {
    fn default() -> &'a StopRequest {
        <StopRequest as ::protobuf::Message>::default_instance()
    }
}

impl StopRequest {
    pub fn new() -> StopRequest {
        ::std::default::Default::default()
    }

    // uint32 time = 1;


    pub fn get_time(&self) -> u32 {
        self.time
    }
    pub fn clear_time(&mut self) {
        self.time = 0;
    }

    // Param is passed by value, moved
    pub fn set_time(&mut self, v: u32) {
        self.time = v;
    }
}

impl ::protobuf::Message for StopRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.time = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.time != 0 {
            my_size += ::protobuf::rt::value_size(1, self.time, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.time != 0 {
            os.write_uint32(1, self.time)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StopRequest {
        StopRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "time",
                |m: &StopRequest| { &m.time },
                |m: &mut StopRequest| { &mut m.time },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StopRequest>(
                "StopRequest",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StopRequest {
        static instance: ::protobuf::rt::LazyV2<StopRequest> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StopRequest::new)
    }
}

impl ::protobuf::Clear for StopRequest {
    fn clear(&mut self) {
        self.time = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StopRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct StopResponse {
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a StopResponse {
    fn default() -> &'a StopResponse {
        <StopResponse as ::protobuf::Message>::default_instance()
    }
}

impl StopResponse {
    pub fn new() -> StopResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for StopResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> StopResponse {
        StopResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let fields = ::std::vec::Vec::new();
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<StopResponse>(
                "StopResponse",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static StopResponse {
        static instance: ::protobuf::rt::LazyV2<StopResponse> = ::protobuf::rt::LazyV2::INIT;
        instance.get(StopResponse::new)
    }
}

impl ::protobuf::Clear for StopResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for StopResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for StopResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x11occlum_exec.proto\x12\nocclumexec\"K\n\x12KillProcessRequest\x12\
    \x1d\n\nprocess_id\x18\x01\x20\x01(\x05R\tprocessId\x12\x16\n\x06signal\
    \x18\x02\x20\x01(\x05R\x06signal\"\x15\n\x13KillProcessResponse\"1\n\x10\
    GetResultRequest\x12\x1d\n\nprocess_id\x18\x01\x20\x01(\x05R\tprocessId\
    \"\xac\x01\n\x11GetResultResponse\x12E\n\x06status\x18\x01\x20\x01(\x0e2\
    -.occlumexec.GetResultResponse.ExecutionStatusR\x06status\x12\x16\n\x06r\
    esult\x18\x02\x20\x01(\x05R\x06result\"8\n\x0fExecutionStatus\x12\x0b\n\
    \x07UNKNOWN\x10\0\x12\x0b\n\x07RUNNING\x10\x01\x12\x0b\n\x07STOPPED\x10\
    \x02\"\xa8\x01\n\x0fExecCommRequest\x12\x1d\n\nprocess_id\x18\x01\x20\
    \x01(\rR\tprocessId\x12\x1a\n\x08sockpath\x18\x02\x20\x01(\tR\x08sockpat\
    h\x12\x18\n\x07command\x18\x03\x20\x01(\tR\x07command\x12\x1e\n\nparamet\
    ers\x18\x04\x20\x03(\tR\nparameters\x12\x20\n\x0benviroments\x18\x05\x20\
    \x03(\tR\x0benviroments\"\xaa\x01\n\x10ExecCommResponse\x12D\n\x06status\
    \x18\x01\x20\x01(\x0e2,.occlumexec.ExecCommResponse.ExecutionStatusR\x06\
    status\x12\x1d\n\nprocess_id\x18\x02\x20\x01(\x05R\tprocessId\"1\n\x0fEx\
    ecutionStatus\x12\x0b\n\x07RUNNING\x10\0\x12\x11\n\rLAUNCH_FAILED\x10\
    \x01\"\x14\n\x12HealthCheckRequest\"\x8b\x01\n\x13HealthCheckResponse\
    \x12E\n\x06status\x18\x01\x20\x01(\x0e2-.occlumexec.HealthCheckResponse.\
    ServingStatusR\x06status\"-\n\rServingStatus\x12\x0b\n\x07SERVING\x10\0\
    \x12\x0f\n\x0bNOT_SERVING\x10\x01\"!\n\x0bStopRequest\x12\x12\n\x04time\
    \x18\x01\x20\x01(\rR\x04time\"\x0e\n\x0cStopResponse2\x8b\x03\n\nOcclumE\
    xec\x12P\n\x0bStatusCheck\x12\x1e.occlumexec.HealthCheckRequest\x1a\x1f.\
    occlumexec.HealthCheckResponse\"\0\x12J\n\x0bExecCommand\x12\x1b.occlume\
    xec.ExecCommRequest\x1a\x1c.occlumexec.ExecCommResponse\"\0\x12J\n\tGetR\
    esult\x12\x1c.occlumexec.GetResultRequest\x1a\x1d.occlumexec.GetResultRe\
    sponse\"\0\x12A\n\nStopServer\x12\x17.occlumexec.StopRequest\x1a\x18.occ\
    lumexec.StopResponse\"\0\x12P\n\x0bKillProcess\x12\x1e.occlumexec.KillPr\
    ocessRequest\x1a\x1f.occlumexec.KillProcessResponse\"\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
